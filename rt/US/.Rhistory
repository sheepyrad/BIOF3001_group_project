y = "Baseline Polyp Count",
fill = "Gender"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16),
plot.subtitle = element_text(hjust = 0.5, size = 12),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12)
) +
# Add text annotation summarizing non-significance
annotate(
"text",
x = 2.5,
y = max(polyps_complete$baseline, na.rm = TRUE) + 10,
label = "Neither gender, family history, nor their interaction significantly influences baseline polyp count",
size = 3,
color = "red"
)
# Display the plot
print(plot2)
# Write your codes for data visualization 3 here if you are using R
library(ggplot2)
library(ggpubr)
p_value_label <- sprintf("p-value = %.4f", p_value_age)
p_value_label_log2 <- sprintf("p-value = %.4f", p_value_age_log2)
# Create the plot
plot3 <- ggplot(polyps_complete, aes(x = age, y = baseline)) +
geom_point(alpha = 0.7, color = "blue") + # Scatter plot
geom_smooth(method = "lm", se = FALSE, color = "red") + # Linear regression line
labs(
title = "Relationship between Baseline Polyp Number and Participant Age",
x = "Age",
y = "Baseline Polyp Count"
) +
theme_minimal() +
# Add regression equation and R²
stat_regline_equation(
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
label.y = max(polyps_complete$baseline, na.rm = TRUE) - 1, # Position the label
color = "black"
) +
# Add p-value annotation
annotate(
"text",
x = min(polyps_complete$age, na.rm = TRUE), # Positioning near the x-axis start
y = max(polyps_complete$baseline, na.rm = TRUE) - 12,
label = p_value_label,
hjust = 0,
color = "black",
size = 4
) +
annotate(
"text",
x = mean(polyps_complete$age, na.rm = TRUE), # Positioning at the mean of age
y = max(polyps_complete$baseline, na.rm = TRUE) +10, # Adjusted y position
label = "No significant relationship between age and baseline polyp count",
size = 3.5,
color = "red"
) +
theme(
plot.title = element_text(hjust = 0.5, size = 16),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12)
)
# Create the plot
plot4 <- ggplot(polyps_lr, aes(x = age, y = baseline_log2)) +
geom_point(alpha = 0.7, color = "blue") + # Scatter plot
geom_smooth(method = "lm", se = FALSE, color = "red") + # Linear regression line
labs(
title = "Relationship between Baseline Polyp Number (log2 transformed) and Participant Age",
x = "Age",
y = "Log2 Baseline Polyp Count"
) +
theme_minimal() +
# Add regression equation and R²
stat_regline_equation(
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
label.y = max(polyps_lr$baseline_log2, na.rm = TRUE) + 2, # Position the label
color = "black"
) +
# Add p-value annotation
annotate(
"text",
x = min(polyps_lr$age, na.rm = TRUE), # Positioning near the x-axis start
y = max(polyps_lr$baseline_log2, na.rm = TRUE) + 1,
label = p_value_label_log2,
hjust = 0,
color = "black",
size = 4
) +
annotate(
"text",
x = mean(polyps_lr$age, na.rm = TRUE), # Positioning at the mean of age
y = max(polyps_lr$baseline_log2, na.rm = TRUE) + 3, # Adjusted y position
label = "No significant relationship between age and baseline polyp count",
size = 3.5,
color = "red"
) +
theme(
plot.title = element_text(hjust = 0.5, size = 12),
axis.title = element_text(size = 10),
axis.text = element_text(size = 10)
)
print(plot3)
print(plot4)
library(ggplot2)
# Create a grouped bar plot
plot5 <- ggplot(polyps_complete, aes(x = treatment, fill = gender)) +
geom_bar(position = "dodge", alpha = 0.8) +
labs(
title = "Treatment Group Assignment by Gender",
subtitle = "Distribution of males and females across placebo and sulindac groups",
x = "Treatment Group",
y = "Number of Participants",
fill = "Gender"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16),
plot.subtitle = element_text(hjust = 0.5, size = 12),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12)
) +
# Add data labels
geom_text(
stat = 'count',
aes(label = ..count..),
position = position_dodge(width = 0.9),
vjust = -0.5,
size = 4
) +
# Add annotation for non-significant association
annotate("text",
x = 1.5,
y = max(table(polyps_complete$treatment, polyps_complete$gender)) + 5,
label = "No significant gender preference in treatment assignment",
size = 3.5, color = "red")
# Display the plot
print(plot5)
# In this case, since the data is not normally distributed, we will perform the Mann-Whitney U Test
test_result <- polyps_complete %>%
wilcox_test(m12 ~ treatment, ref.group = "sulindac", alternative = "less") %>%
add_significance()
# Display the test result
print(test_result)
# Install (if needed) and load the additional necessary packages for plotting here if you are using R
# Load necessary libraries
if (!require("ggplot2")) install.packages("ggplot2")
library(ggplot2)
if (!require("ggpubr")) install.packages("ggpubr")
library(ggpubr)
# Write your codes for data visualization 1 here is you are using R
# Create a boxplot for m12 polyp number by treatment group
plot1 <- ggplot(polyps_complete, aes(x = treatment, y = m12, fill = treatment)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 8, alpha = 0.7) +
stat_summary(fun = "mean", geom = "point", shape = 20, size = 3, color = "blue",
position = position_dodge(width = 0.75), show.legend = FALSE) +
labs(
title = "Effect of Sulindac Treatment on Polyp Number (12 Months)",
subtitle = "Comparison of m12 polyp counts between placebo and sulindac groups",
x = "Treatment Group",
y = "Polyp Count at 12 Months",
fill = "Treatment"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 15),
plot.subtitle = element_text(hjust = 0.5, size = 11),
axis.title = element_text(size = 13),
axis.text = element_text(size = 11)
) +
# Add the statistical significance annotation
stat_compare_means(method = "wilcox.test", label = "p.signif",
ref.group = "sulindac", method.args = list(alternative = "less"),
comparisons = list(c("placebo", "sulindac")),
label.y = max(polyps_complete$m12) + 5) + # Position above the plot
# Add a text annotation for the summary
annotate(
"text", x = 1.5, y = max(polyps_complete$m12) + 25, hjust = 0.5, size=3.5, color = "red",
label = "Sulindac treatment does significantly reduces polyp count at 12 months",
)
# Display the plot
print(plot1)
# Install (if needed) and load the additional necessary packages for plotting here if you are using R
# Load necessary libraries
if (!require("ggplot2")) install.packages("ggplot2")
library(ggplot2)
if (!require("ggpubr")) install.packages("ggpubr")
library(ggpubr)
# Write your codes for data visualization 1 here is you are using R
# Create a boxplot for m12 polyp number by treatment group
plot1 <- ggplot(polyps_complete, aes(x = treatment, y = m12, fill = treatment)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 8, alpha = 0.7) +
stat_summary(fun = "mean", geom = "point", shape = 20, size = 3, color = "blue",
position = position_dodge(width = 0.75), show.legend = FALSE) +
labs(
title = "Effect of Sulindac Treatment on Polyp Number (12 Months)",
subtitle = "Comparison of m12 polyp counts between placebo and sulindac groups",
x = "Treatment Group",
y = "Polyp Count at 12 Months",
fill = "Treatment"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 15),
plot.subtitle = element_text(hjust = 0.5, size = 11),
axis.title = element_text(size = 13),
axis.text = element_text(size = 11)
) +
# Add the statistical significance annotation
stat_compare_means(method = "wilcox.test", label = "p.signif",
ref.group = "sulindac", method.args = list(alternative = "greater"),
comparisons = list(c("placebo", "sulindac")),
label.y = max(polyps_complete$m12) + 5) + # Position above the plot
# Add a text annotation for the summary
annotate(
"text", x = 1.5, y = max(polyps_complete$m12) + 25, hjust = 0.5, size=3.5, color = "red",
label = "Sulindac treatment does significantly reduces polyp count at 12 months",
)
# Display the plot
print(plot1)
# In this case, since the data is not normally distributed, we will perform the Mann-Whitney U Test
test_result <- polyps_complete %>%
wilcox_test(m12 ~ treatment, ref.group = "sulindac", alternative = "greater") %>%
add_significance()
# Display the test result
print(test_result)
# In this case, since the data is not normally distributed, we will perform the Mann-Whitney U Test
test_result <- polyps_complete %>%
wilcox_test(m12 ~ treatment, ref.group = "sulindac", alternative = "less") %>%
add_significance()
# Display the test result
print(test_result)
# In this case, since the data is not normally distributed, we will perform the Mann-Whitney U Test
test_result <- polyps_complete %>%
wilcox_test(m12 ~ treatment, ref.group = "placebo", alternative = "less") %>%
add_significance()
# Display the test result
print(test_result)
# In this case, since the data is not normally distributed, we will perform the Mann-Whitney U Test
test_result <- polyps_complete %>%
wilcox_test(m12 ~ treatment, ref.group = "sulindac", alternative = "less") %>%
add_significance()
# Display the test result
print(test_result)
# Install (if needed) and load the additional necessary packages for plotting here if you are using R
# Load necessary libraries
if (!require("ggplot2")) install.packages("ggplot2")
library(ggplot2)
if (!require("ggpubr")) install.packages("ggpubr")
library(ggpubr)
# Write your codes for data visualization 1 here is you are using R
# Create a boxplot for m12 polyp number by treatment group
plot1 <- ggplot(polyps_complete, aes(x = treatment, y = m12, fill = treatment)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 8, alpha = 0.7) +
stat_summary(fun = "mean", geom = "point", shape = 20, size = 3, color = "blue",
position = position_dodge(width = 0.75), show.legend = FALSE) +
labs(
title = "Effect of Sulindac Treatment on Polyp Number (12 Months)",
subtitle = "Comparison of m12 polyp counts between placebo and sulindac groups",
x = "Treatment Group",
y = "Polyp Count at 12 Months",
fill = "Treatment"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 15),
plot.subtitle = element_text(hjust = 0.5, size = 11),
axis.title = element_text(size = 13),
axis.text = element_text(size = 11)
) +
# Add the statistical significance annotation
stat_compare_means(method = "wilcox.test", label = "p.signif",
ref.group = "sulindac", method.args = list(alternative = "less"),
comparisons = list(c("sulindac", "placebo")),
label.y = max(polyps_complete$m12) + 5) + # Position above the plot
# Add a text annotation for the summary
annotate(
"text", x = 1.5, y = max(polyps_complete$m12) + 25, hjust = 0.5, size=3.5, color = "red",
label = "Sulindac treatment does significantly reduces polyp count at 12 months",
)
# Display the plot
print(plot1)
setwd("~/Desktop/Bioinformatics/Year_3/Sem_1/BIOF3001/BIOF3001_group_project")
transmissibility_USA <- readRDS("./rds/transmissibility_USA.rds")
transmissibility_DRC <- readRDS("./rds/transmissibility_DRC.rds")
transmissibility_UG <- readRDS("./rds/transmissibility_UG.rds")
transmissibility_BU <- readRDS("./rds/transmissibility_BU.rds")
library(shiny); runApp('code/compare/plot_with_epi.R')
# Load the incidence data
mpox_data <- read.csv("~/Desktop/Bioinformatics/Year_3/Sem_1/BIOF3001/BIOF3001_group_project/data/mpox.csv")
saveRDS(mpox_data, "./rds/mpox_data.rds")
# Load the incidence data
mpox_data <- readRDS("./rds/mpox_data.rds")
# Load the incidence data
mpox_data <- readRDS("./rds/mpox_data.rds")
runApp('code/compare/plot_with_epi.R')
# Load the data
transmissibility_USA <- readRDS("./rds/transmissibility_USA.rds")
transmissibility_DRC <- readRDS("./rds/transmissibility_DRC.rds")
# Load the data
transmissibility_USA <- readRDS("./rds/transmissibility_USA.rds")
transmissibility_DRC <- readRDS("./rds/transmissibility_DRC.rds")
transmissibility_UG <- readRDS("./rds/transmissibility_UG.rds")
transmissibility_BU <- readRDS("./rds/transmissibility_BU.rds")
mpox_data <- readRDS("./rds/mpox_data.rds")
# Convert date columns to Date format
transmissibility_USA$t_start <- as.Date(transmissibility_USA$t_start, origin = "1899-12-30")
transmissibility_USA$t_end <- as.Date(transmissibility_USA$t_end, origin = "1899-12-30")
transmissibility_DRC$t_start <- as.Date(transmissibility_DRC$t_start, origin = "1899-12-30")
transmissibility_DRC$t_end <- as.Date(transmissibility_DRC$t_end, origin = "1899-12-30")
transmissibility_UG$t_start <- as.Date(transmissibility_UG$t_start, origin = "1899-12-30")
transmissibility_UG$t_end <- as.Date(transmissibility_UG$t_end, origin = "1899-12-30")
transmissibility_BU$t_start <- as.Date(transmissibility_BU$t_start, origin = "1899-12-30")
transmissibility_BU$t_end <- as.Date(transmissibility_BU$t_end, origin = "1899-12-30")
mpox_data$Day <- as.Date(mpox_data$Day, origin = "1899-12-30")
saveRDS(transmissibility_USA, "./rds/transmissibility_USA.rds")
saveRDS(transmissibility_USA, "./rds/transmissibility_USA.rds")
saveRDS(transmissibility_DRC, "./rds/transmissibility_DRD.rds")
saveRDS(transmissibility_UG, "./rds/transmissibility_UG.rds")
saveRDS(transmissibility_BU, "./rds/transmissibility_BU.rds")
saveRDS(mpox_data, "./rds/mpox_data.rds")
# Create a mapping between input values and actual country names in the data
country_mapping <- list(
"USA" = "United States",
"DRC" = "Democratic Republic of Congo",
"UG" = "Uganda",
"BU" = "Burundi"
)
runApp('code/compare/plot_with_epi.R')
# Load the data
transmissibility_USA <- readRDS("./rds/transmissibility_USA.rds")
transmissibility_DRC <- readRDS("./rds/transmissibility_DRC.rds")
transmissibility_UG <- readRDS("./rds/transmissibility_UG.rds")
transmissibility_BU <- readRDS("./rds/transmissibility_BU.rds")
mpox_data <- readRDS("./rds/mpox_data.rds")
# Load required libraries
library(shiny)
library(openxlsx)
library(ggplot2)
library(plotly)
library(dplyr)
library(zoo) # For calculating moving averages
# Load the data
transmissibility_USA <- readRDS("./rds/transmissibility_USA.rds")
transmissibility_DRC <- readRDS("./rds/transmissibility_DRC.rds")
transmissibility_UG <- readRDS("./rds/transmissibility_UG.rds")
transmissibility_BU <- readRDS("./rds/transmissibility_BU.rds")
mpox_data <- readRDS("./rds/mpox_data.rds")
# Create a mapping between input values and actual country names in the data
country_mapping <- list(
"USA" = "United States",
"DRC" = "Democratic Republic of Congo",
"UG" = "Uganda",
"BU" = "Burundi"
)
# Define the UI
ui <- fluidPage(
titlePanel("Interactive Visualization of Daily Cases and Reproduction Number (R)"),
sidebarLayout(
sidebarPanel(
radioButtons("country", "Select Country:",
choices = list("USA" = "USA", "DRC" = "DRC", "UG" = "UG", "BU" = "BU"),
selected = "USA",
inline = TRUE), # Reduce size by making inline
width = 2 # Reduce sidebar width
),
mainPanel(
plotlyOutput("interactivePlot", height = "800px"), # Increase plot size
width = 10 # Increase main panel width
)
)
)
# Define the server logic
# Update the server logic to include UG and BU
server <- function(input, output) {
output$interactivePlot <- renderPlotly({
# Map the input country to the actual country name in the data
actual_country <- country_mapping[[input$country]]
# Get the data for the selected country
data_Rt <- switch(input$country,
"USA" = transmissibility_USA,
"DRC" = transmissibility_DRC,
"UG" = transmissibility_UG,
"BU" = transmissibility_BU)
data_incidence <- mpox_data %>% filter(Country == actual_country)
# Set country-specific colors and labels
country_name <- actual_country
color <- switch(input$country,
"USA" = "blue",
"DRC" = "darkgreen",
"UG" = "purple",
"BU" = "orange")
fill_color <- switch(input$country,
"USA" = "lightblue",
"DRC" = "lightgreen",
"UG" = "violet",
"BU" = "gold")
# Calculate a 7-day moving average for daily cases
data_incidence <- data_incidence %>%
arrange(Day) %>%
mutate(rollavg = zoo::rollmean(Daily.cases, 7, fill = NA, align = "right"))
# Create the incidence plot
fig_incidence <- plot_ly(data_incidence, x = ~Day) %>%
add_bars(y = ~Daily.cases, name = "Daily Cases", marker = list(color = 'grey')) %>%
add_lines(y = ~rollavg, name = "7-day Average", line = list(color = color, width = 2)) %>%
layout(
yaxis = list(title = "Daily Cases"),
xaxis = list(title = "Date", type = 'date'),
showlegend = TRUE
)
# Create the Rt plot
fig_Rt <- plot_ly(data_Rt, x = ~t_end) %>%
add_ribbons(ymin = ~`Quantile.0.025(R)`, ymax = ~`Quantile.0.975(R)`,
fillcolor = fill_color, line = list(color = 'transparent'),
hoverinfo = "none", name = "95% Confidence Interval", opacity = 0.5) %>%
add_lines(y = ~`Mean(R)`, line = list(color = color, width = 2),
name = "Mean R", hoverinfo = "x+y") %>%
add_lines(x = ~t_end, y = 1, line = list(color = 'red', dash = 'dash', width = 1),
name = "R=1", hoverinfo = "none") %>%
layout(
yaxis = list(title = "Reproduction Number (R)"),
xaxis = list(title = "Date", type = 'date'),
showlegend = FALSE  # Hide legend to avoid duplication
)
# Combine the plots into a single figure arranged vertically
fig <- subplot(fig_incidence, fig_Rt, nrows = 2, shareX = TRUE, titleY = TRUE, margin = 0.1) %>%
layout(
title = paste("Daily Cases and Reproduction Number (R) Over Time (", country_name, ")", sep = ""),
margin = list(t = 80, b = 50),
xaxis = list(
title = "Date",
type = 'date',
rangeslider = list(visible = TRUE),
rangeselector = list(
buttons = list(
list(count = 7, label = "1 Week", step = "day", stepmode = "backward"),
list(count = 1, label = "1 Month", step = "month", stepmode = "backward"),
list(count = 3, label = "3 Months", step = "month", stepmode = "backward"),
list(step = "all", label = "All Time")
)
)
),
legend = list(orientation = "h", x = 0.5, y = -0.1, xanchor = "center")  # Adjust legend position if needed
)
fig
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
setwd("~/Desktop/Bioinformatics/Year_3/Sem_1/BIOF3001/BIOF3001_group_project")
runApp('code/compare/plot_with_epi.R')
runApp('code/compare/plot_with_epi.R')
runApp('code/compare/plot_with_epi.R')
setwd("/rds")  # Set working directory to the location of the data files
setwd("")  # Set working directory to the location of the data files
setwd("~/Desktop/Bioinformatics/Year_3/Sem_1/BIOF3001/BIOF3001_group_project")
setwd("~")  # Set working directory to the location of the data files
setwd(getSrcDirectory(function(){}[1]))  # Set working directory to the location of the data files
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))  # Set working directory to the location of the data files
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Load the data
transmissibility_USA <- readRDS("/rds/transmissibility_USA.rds")
transmissibility_DRC <- readRDS("/rds/transmissibility_DRC.rds")
transmissibility_UG <- readRDS("/rds/transmissibility_UG.rds")
transmissibility_BU <- readRDS("/rds/transmissibility_BU.rds")
mpox_data <- readRDS("/rds/mpox_data.rds")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Load the data
transmissibility_USA <- readRDS("./rds/transmissibility_USA.rds")
transmissibility_DRC <- readRDS("./rds/transmissibility_DRC.rds")
transmissibility_UG <- readRDS("./rds/transmissibility_UG.rds")
transmissibility_BU <- readRDS("./rds/transmissibility_BU.rds")
mpox_data <- readRDS("./rds/mpox_data.rds")
# Create a mapping between input values and actual country names in the data
country_mapping <- list(
"USA" = "United States",
"DRC" = "Democratic Republic of Congo",
"UG" = "Uganda",
"BU" = "Burundi"
)
runApp('plot_with_epi.R')
runApp('plot_with_epi.R')
runApp('cfr_T.R')
runApp('cfr_T.R')
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# read the epi curve for mpox (obtained using Matlab codes)
BUEpiCurve = read.csv('../../output/BU/deconvolInfection_BU_R.csv',header = TRUE);
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# read the epi curve for mpox (obtained using Matlab codes)
BUEpiCurve = read.csv('../../output/BU/deconvolInfection_BU_R.csv',header = TRUE);
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Read your data (assuming it's in CSV format)
bu_data <- read.csv('~../../data/mpox_BU.csv')
# Read your data (assuming it's in CSV format)
bu_data <- read.csv('../../data/mpox_BU.csv')
source("DeconvolutionIncidence1.R")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# read the epi curve for mpox (obtained using Matlab codes)
DRCEpiCurve = read.csv('../../output/DRC/deconvolInfection_DRC_R.csv',header = TRUE);
# Read your data (assuming it's in CSV format)
drc_data <- read.csv('../../data/mpox_DRC.csv')
# read the epi curve for mpox (obtained using R codes)
UGEpiCurve = read.csv('../../output/UG/deconvolInfection_UG_R.csv',header = TRUE);
# read the epi curve for mpox (obtained using Matlab codes)
USEpiCurve = read.csv('../../output/US/deconvolInfection_US_R.csv',header = TRUE);
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# read the epi curve for mpox (obtained using Matlab codes)
USEpiCurve = read.csv('../../output/US/deconvolInfection_US_R.csv',header = TRUE);
